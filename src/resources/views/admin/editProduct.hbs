<div class="check-attribute-element-product">
    {{#each product.attribute}}
        <div class='check-type' nameCheck={{this.name}}>
            {{#each this.arrayElement}}
                <div class="check-element" nameCheck="{{this.name}}"></div>
            {{/each}}
        </div>
    {{/each}}
</div>
<form class="container mt-5" method="POST" action="/admin/update/product/{{product._id}}?_method=PUT" >
    <div class="mb-3">
        <label for="collection" class="form-label" >collection</label>
        <select class="form-select" aria-label="Default select example" name="nameCollection">
                <option value="{{product.nameCollection}}" selected hidden>{{product.nameCollection}}</option>
            {{#each collections}}
                <option value="{{this.name}}">{{this.name}}</option>
            {{/each}}
        </select>
    </div>
    
    <div class="mb-3">
        <label for="title" class="form-label" >Title</label>
        <input type="text" class="form-control" name='title' id="title" value="{{product.title}}" >
    </div>
    <div class="mb-3">
        <label for="realPrice" class="form-label" >Real Price</label>
        <input type="text" class="form-control" name= 'realPrice' id="realPrice" value={{product.realPrice}}>
    </div>
    <div class="mb-3">
        <label for="sellPrice" class="form-label" >Sell Price</label>
        <input type="text" class="form-control"  name= 'sellPrice' id="sellPrice" value={{product.sellPrice}}>
    </div>
    <div class="d-flex">
        <select style="width: 50%;" class="form-select me-3 select-attribute" aria-label="Default select example" name="attributeSelect">
            <option value="" selected>Add Attribute</option>
            {{#each attributes}}
                <option value="{{this.name}}">{{this.name}}</option>
            {{/each}}
        </select>
        <div class="btn btn-primary" id="add-attribute-product">Apply</div>
    </div>
    {{#each attributes}}
        <div class="wrapped-add-attribute {{this.name}} border visually-hidden border-secondary p-1 my-2">
            <div class="d-flex mt-3 align-items-center justify-content-between wrapper-attribute-name {{this.name}}">
                <p class="label-name-attribute text-capitalize">{{this.name}}</p>
                <p class="btn btn-danger btn-remove-attribute {{this.name}}" data={{this.name}}>Remove</p>
            </div>
            <ul class="list-group border wrapper-item-attribute-element border-secondary list-group-horizontal p-1">
                {{#each this.arrayElement}}
                    <li class="list-group-item attribute-element-added {{this.name}} visually-hidden mb-3 btn">{{this.name}}</li>
                {{/each}}
            </ul>
            <div class="d-flex my-3 justify-content-between">
                <div class="btn btn-secondary clear-all-attribute-element">Clear All</div>
                <!-- Button trigger modal add attribute element-->
                <div class="dropdown">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Add
                    </button>
                    <div class="dropdown-menu wrapper-item-attribute-element-dropdown" aria-labelledby="dropdownMenuButton">
                        {{#each this.arrayElement}}
                            <a class="dropdown-item btn add-attribute-element-dropdown" >{{this.name}}</a>
                        {{/each}}
                    </div>
                </div>
                <div class="btn btn-secondary add-all-attribute-element">Add All</div>
            </div>
        </div>
    {{/each}}
    <button type="submit" class="btn btn-primary mt-3">Submit</button>
</form>
<script>
    var wrappedAddAttribute = document.querySelectorAll('.wrapped-add-attribute');
    var attributeElementAdded = document.querySelectorAll('.attribute-element-added');
    var isTypeAttributeProduct = document.querySelector('.check-attribute-element-product').querySelectorAll('.check-type');
    var isElementAttributeProduct = document.querySelectorAll('.check-element');

    const labelNameAttribute = document.querySelectorAll('.label-name-attribute');
    const wrapperAttributeName = document.querySelectorAll('.wrapper-attribute-name');

    if(isTypeAttributeProduct.length > 0){
        isTypeAttributeProduct.forEach(element => {
            var nameCheck = element.attributes.nameCheck.value;
            wrappedAddAttribute.forEach((item,index) => {
                if(item.classList.contains(nameCheck)){
                    item.classList.remove('visually-hidden');
                    var inputNameAttribute = document.createElement('INPUT');
                    inputNameAttribute.name = `attribute[${index}][name]`;
                    inputNameAttribute.type = 'hidden';
                    inputNameAttribute.value = labelNameAttribute[index].textContent;
                    wrapperAttributeName[index].appendChild(inputNameAttribute);
                };
            })
        })
    }
    if(isTypeAttributeProduct.length > 0){
        isTypeAttributeProduct.forEach((element) => {
            var nameCheck = element.attributes.nameCheck.value;
            isElementAttributeProduct.forEach((li) => {
                var nameCheckElement = li.attributes.nameCheck.value;
                wrappedAddAttribute.forEach((item,index) => {
                    if(item.classList.contains(nameCheck)){
                        item.querySelectorAll('.attribute-element-added').forEach((child, index2) => {
                            if(child.classList.contains(nameCheckElement)){
                                child.classList.remove('visually-hidden')
                                const input = document.createElement('INPUT');
                                input.type = 'hidden';
                                input.name = `attribute[${index}][arrayElement][${index2}][name]`;
                                input.value = child.textContent;
                                child.appendChild(input);
                            }
                        })
                    }
            })
            })
        })
    }
    
</script>
<script>
    const addAttribute = document.querySelector('#add-attribute-product');
    const removeAttribute = document.querySelectorAll('.btn-remove-attribute');
    const clearAllAttributeElement = document.querySelectorAll('.clear-all-attribute-element');
    const addAllAttributeElement = document.querySelectorAll('.add-all-attribute-element');
    const addAttributeElement = document.querySelectorAll('.add-attribute-element');
    const wrapperItemAttributeElement = document.querySelectorAll('.wrapper-item-attribute-element');
    const addAttributeElementDropdown = document.querySelectorAll('.add-attribute-element-dropdown');

    //handle show type attribute
    addAttribute.onclick = function(){
        const selectAttribute = document.querySelector('.select-attribute').value;
        wrappedAddAttribute.forEach((element,index) => {
            if(element.classList.contains(selectAttribute)){
                if(wrapperAttributeName[index].querySelector('input') == null){
                    var inputNameAttribute = document.createElement('INPUT');
                    inputNameAttribute.name = `attribute[${index}][name]`;
                    inputNameAttribute.type = 'hidden';
                    inputNameAttribute.value = labelNameAttribute[index].textContent;
                    wrapperAttributeName[index].appendChild(inputNameAttribute);
                    element.classList.remove('visually-hidden');
                }
            }
        })
    }
    // remove type attribute
    removeAttribute.forEach((element,index) => {
        element.onclick = function() {
            wrappedAddAttribute[index].classList.add('visually-hidden');
            wrapperAttributeName[index].querySelector('input').remove();
        }
    })
    //handle add all element attribute
    addAllAttributeElement.forEach((element,index) => {
        element.onclick = function() {
            wrapperItemAttributeElement[index].querySelectorAll('li').forEach((item,index2) => {
                if(item.querySelector('input') == null){
                    item.classList.remove('visually-hidden');
                    const input = document.createElement('INPUT');
                    input.type = 'hidden';
                    input.name = `attribute[${index}][arrayElement][${index2}][name]`;
                    input.value = item.textContent;
                    item.appendChild(input);
                }
            });

        }
    })
    // handle clear all element attribute
    clearAllAttributeElement.forEach((element,index) => {
        element.onclick = function() {
            wrapperItemAttributeElement[index].querySelectorAll('li').forEach((item) => {
                item.classList.add('visually-hidden');
                item.querySelector('input').remove();
            });

        }
    })
    // handle remove signle attribute element
    attributeElementAdded.forEach((element,index) => {
        element.onclick = function() {
            this.classList.add('visually-hidden');
            element.querySelector('input').remove();
        }
    })
    //handle add signle attribute element
    wrappedAddAttribute.forEach((element,index) => {
        element.querySelectorAll('.add-attribute-element-dropdown').forEach((item,index2) => {
            item.onclick = function() {
                if(element.querySelectorAll('.attribute-element-added')[index2].querySelector('input') == null){
                    element.querySelectorAll('.attribute-element-added')[index2].classList.remove('visually-hidden');
                    const input = document.createElement('INPUT');
                    input.name = `attribute[${index}][arrayElement][${index2}][name]`;
                    input.type = 'hidden';
                    input.value = item.textContent;
                    element.querySelectorAll('.attribute-element-added')[index2].appendChild(input);
                }
            }
        })
    })
</script>